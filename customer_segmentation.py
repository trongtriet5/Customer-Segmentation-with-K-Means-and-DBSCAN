# -*- coding: utf-8 -*-
"""[Khai thác dữ liệu và ứng dụng] Customer Segmentation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1koFRaao-Hu-F7aKIR080vOop72szT-AX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly as py
import plotly.graph_objs as go
from sklearn.cluster import KMeans

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Data Preprocessing
# Remove unnecessary data
df.drop(['CustomerID'], axis=1, inplace=True)

# Handle missing data (if any)
df.dropna(inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Data Exploration
# Descriptive statistics
print(df.describe())

# Data types
print(df.dtypes)

# Univariate Analysis (Phân tích đơn biến)
plt.style.use('fivethirtyeight')
plt.figure(1, figsize=(20, 6))
for i, feature in enumerate(['Age', 'Annual Income (k$)', 'Spending Score (1-100)'], 1):
    plt.subplot(1, 3, i)
    sns.histplot(df[feature], bins=20)
    plt.title('Distribution of {}'.format(feature))
plt.show()

# Countplot for Gender
plt.figure(figsize=(8, 6))
sns.countplot(x='Gender', data=df)
plt.title('Gender Distribution')
plt.show()

# Bivariate Analysis (Phân tích đa biến)
plt.figure(figsize=(15, 10))
sns.pairplot(df, hue='Gender', diag_kind='kde')
plt.show()

# Correlation Matrix (Ma trận tương quan)
corr_matrix = df.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# K-means Clustering
# Feature selection
X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].values

# K-means clustering with optimal number of clusters
kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)
kmeans.fit(X)
df['Cluster'] = kmeans.labels_

# Elbow method to find optimal number of clusters
inertia = []
for n in range(1, 11):
    kmeans = KMeans(n_clusters=n, init='k-means++', random_state=42)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()

# Create a scatter plot for segmentation
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', data=df, palette='Set2')
plt.title('Segmentation by Annual Income and Spending Score')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

# Create a 3D scatter plot for segmentation
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Age'], df['Annual Income (k$)'], df['Spending Score (1-100)'], c=df['Cluster'], cmap='Set2')
ax.set_xlabel('Age')
ax.set_ylabel('Annual Income (k$)')
ax.set_zlabel('Spending Score (1-100)')
ax.set_title('Segmentation by Age, Annual Income and Spending Score')
plt.show()

fig, axes = plt.subplots(2, 2, figsize=(10, 10))
fig.suptitle('Cluster Analysis')

# Annual Income
sns.barplot(ax=axes[0, 0], x='Cluster', y='Annual Income (k$)', data=df)  # Use df instead of median_df

# Spending Score
sns.barplot(ax=axes[0, 1], x='Cluster', y='Spending Score (1-100)', data=df)

# Gender (assuming you have a 'Gender' or 'Female' column)
sns.barplot(ax=axes[1, 0], x='Cluster', y='Gender', data=df)  # Adjust column name if needed

# Age
sns.barplot(ax=axes[1, 1], x='Cluster', y='Age', data=df)

plt.show()
